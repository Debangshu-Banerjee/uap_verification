import torch
from src.uap_results import UAPSingleRes
import gurobipy as grb
from src.common import Status

class UapBasicLP:
    def __init__(self, net, props, args, baseline_results) -> None:
        self.net = net
        self.props = props 
        self.args = args
        self.baseline_results = baseline_results
        self.batch_size = len(self.baseline_results)
        #self.input_size = self.baseline_results[0].input.shape[0]
        #print(self.baseline_results[0].noise_ind)
        self.input_size = len(self.baseline_results[0].noise_ind)
        self.baseline_lbs = []
        # zonotope baseline
        self.zono_centers = None
        self.zono_coefs = None
        # crown baseline
        self.lb_coefs = None
        self.lb_biases = None
        # Model
        self.model = grb.Model()
        # stores minimum of each individual property.
        self.prop_mins = []
        self.prop_maxs = []
        self.individual_lbs = None
        self.baseline_monotone_lb_ub = []
    
    def populate_info(self):
        #print('zono center ', self.baseline_results[0].zono_coef)
        # for i, res in enumerate(self.baseline_results):
        #     if i % 2 == 0:
        #         self.baseline_monotone_lb_ub.append(res.final_lb.item())
        #     else:
        #         self.baseline_monotone_lb_ub.append(res.final_ub.item())
        for res in self.baseline_results:
            self.baseline_lbs.append(torch.min(res.final_lb))
            if res.zono_center is not None:
                if self.zono_centers is None:
                    self.zono_centers = [res.zono_center]
                else:
                    self.zono_centers.append(res.zono_center)

            if res.zono_coef is not None:
                if self.zono_coefs is None:
                    self.zono_coefs = [res.zono_coef]
                else:
                    self.zono_coefs.append(res.zono_coef)

            if res.lb_coef is not None:
                if self.lb_coefs is None:
                    self.lb_coefs = [res.lb_coef]
                else:
                    self.lb_coefs.append(res.lb_coef)

            if res.lb_bias is not None:
                if self.lb_biases is None:
                    self.lb_biases = [res.lb_bias]
                else:
                    self.lb_biases.append(res.lb_bias)

    def compute_individual_target_ubs(self, zono_centers, zono_coefs):
        actual_coefs = []
        lbs = []
        for i, coef in enumerate(zono_coefs):
            center = zono_centers[i]
            input_coefs = coef[:self.input_size]
            input_coefs = input_coefs.T
            other_coefs = coef[self.input_size:]
            cof_abs = torch.sum(torch.abs(other_coefs), dim=0)
            lb = center + cof_abs
            lbs.append(lb.detach().numpy())
            actual_coefs.append(input_coefs)
        # print(f'lbs: {lbs}')
        
        epsilons = self.model.addMVar(self.input_size, lb=-1, ub=1, name='epsilons')
        prop_maxs = []
        
        for i, input_coefs in enumerate(actual_coefs):
            input_coefs = input_coefs.detach().numpy()
            t = self.model.addMVar(input_coefs.shape[0], lb=float('-inf'), ub=float('inf'), name=f'individual_target_ubs_{i}')
            self.model.addConstr(input_coefs @ epsilons + lbs[i] == t)
            var_min = self.model.addVar(lb=-float('inf'), ub=float('inf'), 
                                                vtype=grb.GRB.CONTINUOUS, 
                                                name=f'var_min_{i}')
            self.model.addGenConstrMin(var_min, t.tolist())
            prop_maxs.append(var_min)
            self.model.update()
        return prop_maxs
    
    def formulate_zono_lb(self, targeted = False):
        if self.zono_coefs is None or self.zono_centers is None:
            raise ValueError("coefs or center is NULL.")
        assert len(self.zono_coefs) == len(self.zono_centers)
        self.model.setParam('OutputFlag', False)
        actual_coefs = []
        lbs = []
        # print(f'zono_centers: {self.zono_centers}')
        # print(f'zono_coefs: {self.zono_coefs}')
        for i, coef in enumerate(self.zono_coefs):
            center = self.zono_centers[i]
            input_coefs = coef[:self.input_size]
            input_coefs = input_coefs.T
            other_coefs = coef[self.input_size:]
            cof_abs = torch.sum(torch.abs(other_coefs), dim=0)
            lb = center - cof_abs
            lbs.append(lb.detach().numpy())
            actual_coefs.append(input_coefs)
        # print(f'lbs: {lbs}')

        epsilons = self.model.addMVar(self.input_size, lb=-1, ub=1, name='epsilons')
        individual_lbs = []
        
        for i, input_coefs in enumerate(actual_coefs):
            input_coefs = input_coefs.detach().numpy()
            t = self.model.addMVar(input_coefs.shape[0], lb=float('-inf'), ub=float('inf'), name=f'individual_lbs_{i}')
            #print(input_coefs.shape, lbs[i].shape, epsilons.shape)
            self.model.addConstr(input_coefs @ epsilons + lbs[i] == t)
            individual_lbs.append(t)
            var_min = self.model.addVar(lb=-float('inf'), ub=float('inf'), 
                                                vtype=grb.GRB.CONTINUOUS, 
                                                name=f'var_min_{i}')
            self.model.addGenConstrMin(var_min, t.tolist())
            self.prop_mins.append(var_min)
            self.model.update()
        self.individual_lbs = individual_lbs
        #print(self.zono_coefs[0])
        #print([self.baseline_results[j].target_coefs[i] for j in range(len(self.baseline_results))][0])
        if targeted:
            self.prop_mins = []
            for i in range(10):
                prop_min = self.compute_individual_target_ubs([self.baseline_results[j].target_centers[i] for j in range(len(self.baseline_results))], [self.baseline_results[j].target_coefs[i] for j in range(len(self.baseline_results))])
                self.prop_mins.append(prop_min)
        # print('---------------')
        # print([self.props[i].out_constr.label for i in range(len(self.props))])
        # print('---------------')
        # print(individual_lbs)

    def run_zono_lp_baseline(self, proportion, targeted=False, monotone = False):
        self.baseline_lbs.sort()
        # print([res.final_lb for res in self.baseline_results])
        # print([res.final_ub for res in self.baseline_results])
        # print(monotone)
        #print(monotone.type())
        if not targeted:
            if isinstance(monotone, torch.FloatTensor):
                print("DeepZ lb_ubs", self.baseline_monotone_lb_ub)
                deepz_res = []
                for i in range(int(len(self.baseline_monotone_lb_ub)/2)):
                    deepz_res.append((self.baseline_monotone_lb_ub[2*i] > monotone[2*i]) and (self.baseline_monotone_lb_ub[2*i+1] < monotone[2*i +1]))
                    assert monotone[2*i] == monotone[2*i + 1]
                print("DeepZ porportion", (sum(deepz_res)/len(deepz_res)).item())
            else:
                print("DeepZ lbs", self.baseline_lbs)
        else:
            deepz_res = [[] for i in range(10)]
            for i in range(len(self.baseline_results)):
                for j in range(10):
                    if self.props[i].out_constr.label == j:
                        continue
                    deepz_res[j].append((self.baseline_results[i].target_ubs[j]).min() <= 0)
            print("DeepZ porportion", [(sum(res)/len(res)).item() for res in deepz_res])
        self.formulate_zono_lb(targeted = targeted)
        if isinstance(monotone, torch.FloatTensor):
            binary_vars = []
            for i in range(int(len(self.prop_mins)/2)):
                b_up = self.model.addVar(vtype=grb.GRB.BINARY, name=f'b{i}_upper')
                b_low = self.model.addVar(vtype=grb.GRB.BINARY, name=f'b{i}_lower')
                # BIG M formulation 
                BIG_M = 1e11

                # Force binary_vars[-1] to be '1' when t_min > 0
                self.model.addConstr(BIG_M * b_up >= self.individual_lbs[2*i] - monotone[2*i])
                # Force binary_vars[-1] to be '0' when t_min < 0 or -t_min  > 0
                self.model.addConstr(BIG_M * (b_up - 1) <= self.individual_lbs[2*i] - monotone[2*i])

                # Force binary_vars[-1] to be '1' when t_min > 0
                self.model.addConstr(BIG_M * b_low >= monotone[2*i + 1] - self.individual_lbs[2*i + 1])
                # Force binary_vars[-1] to be '0' when t_min < 0 or -t_min  > 0
                self.model.addConstr(BIG_M * (b_low - 1) <= monotone[2*i + 1] - self.individual_lbs[2*i + 1])
                b = self.model.addVar(vtype=grb.GRB.BINARY, name=f'b{i}')
                self.model.addConstr(b == grb.and_(b_up, b_low))
                binary_vars.append(b)

            p = self.model.addVar(vtype=grb.GRB.CONTINUOUS, name='p')
            self.model.addConstr(p == grb.quicksum(binary_vars[i] for i in range(len(binary_vars))) / len(binary_vars))
            # self.model.reset()
            self.model.update()
            self.model.setObjective(p, grb.GRB.MINIMIZE)
            self.model.optimize()
            if self.model.status == 2:
                return p.X
            else:
                print("Gurobi model status", self.model.status)
                self.model.computeIIS()
                self.model.write("model_basic.ilp")
                return None
        elif targeted:
            percentages = []
            bin_sizes = []
            for j in range(10):
                binary_vars = []
                for i, var_max in enumerate(self.prop_mins[j]):
                    if self.props[i].out_constr.label == j:
                        continue
                    binary_vars.append(self.model.addVar(vtype=grb.GRB.BINARY, name=f'b{j},{i}')) 
                    # BIG M formulation 
                    BIG_M = 1e11

                    # Force binary_vars[-1] to be '1' when t_min > 0
                    self.model.addConstr(BIG_M * binary_vars[-1] >= -var_max)


                    # Force binary_vars[-1] to be '0' when t_min < 0 or -t_min  > 0
                    self.model.addConstr(BIG_M * (binary_vars[-1] - 1) <= -var_max)
                p = self.model.addVar(vtype=grb.GRB.CONTINUOUS, name='p')
                self.model.addConstr(p == grb.quicksum(binary_vars[i] for i in range(len(binary_vars))) / len(binary_vars))
                # self.model.reset()
                self.model.update()
                self.model.setObjective(p, grb.GRB.MINIMIZE)
                self.model.optimize()
                if self.model.status == 2:
                    percentages.append(p.X)
                    bin_sizes.append(len(binary_vars))
                else:
                    print("Gurobi model status", self.model.status)
                    self.model.computeIIS()
                    self.model.write("model_basic.ilp")
                    return None
            return percentages, bin_sizes
        else:
            if proportion == False:
                problem_min = self.model.addVar(lb=-float('inf'), ub=float('inf'), vtype=grb.GRB.CONTINUOUS, 
                                    name='problem_min')
                self.model.addGenConstrMax(problem_min, self.prop_mins)
                self.model.setObjective(problem_min, grb.GRB.MINIMIZE)
                self.model.optimize()
                if self.model.status == 2:
                    return problem_min.X
                else:
                    print("Gurobi model status", self.model.status)
                    self.model.computeIIS()
                    self.model.write("model_baseline.ilp")
                    return None
            else:
                binary_vars = []
                for i, var_min in enumerate(self.prop_mins):
                    binary_vars.append(self.model.addVar(vtype=grb.GRB.BINARY, name=f'b{i}')) 
                    # BIG M formulation 
                    BIG_M = 1e11

                    # Force binary_vars[-1] to be '1' when t_min > 0
                    self.model.addConstr(BIG_M * binary_vars[-1] >= var_min)


                    # Force binary_vars[-1] to be '0' when t_min < 0 or -t_min  > 0
                    self.model.addConstr(BIG_M * (binary_vars[-1] - 1) <= var_min)
                p = self.model.addVar(vtype=grb.GRB.CONTINUOUS, name='p')
                self.model.addConstr(p == grb.quicksum(binary_vars[i] for i in range(self.batch_size)) / self.batch_size)
                # self.model.reset()
                self.model.update()
                self.model.setObjective(p, grb.GRB.MINIMIZE)
                self.model.optimize()
                if self.model.status == 2:
                    return p.X
                else:
                    print("Gurobi model status", self.model.status)
                    self.model.computeIIS()
                    self.model.write("model_basic.ilp")
                    return None


    def run_crown_lp_baseline(self, proportion):
        pass                  

    def run(self, proportion=False, targeted = False, monotone = False) -> UAPSingleRes:
        self.populate_info()
        if self.zono_centers is not None:
            if targeted:
                ans, bin_sizes = self.run_zono_lp_baseline(proportion=proportion, targeted=targeted)
            else:
                ans = self.run_zono_lp_baseline(proportion=proportion, targeted=targeted, monotone = monotone)
            if ans is None:
                verified_status = Status.UNKNOWN
                verified_proportion = sum([self.baseline_lbs[i] >= 0 for i in range(len(self.baseline_lbs))])/len(self.baseline_lbs)
                if verified_proportion >= self.args.cutoff_percentage:
                    verified_status = Status.VERIFIED
                return UAPSingleRes(domain=self.args.domain, input_per_prop=self.args.count_per_prop,
                    status=verified_status, global_lb=None, time_taken=None, 
                    verified_proportion=verified_proportion)
            else:
                global_lb = None
                verified_proportion = None
                verified_status = Status.UNKNOWN
                if targeted:
                    print("Baseline global proportion ", ans)
                    results = []
                    for i, an in enumerate(ans):
                        verified_proportion = an
                        if verified_proportion >= self.args.cutoff_percentage:
                            verified_status = Status.VERIFIED
                        results.append(UAPSingleRes(domain=self.args.domain, input_per_prop=self.args.count_per_prop,
                                status=verified_status, global_lb=global_lb, time_taken=None, 
                                verified_proportion=verified_proportion, bin_size = bin_sizes[i]))
                        verified_status = Status.UNKNOWN
                    return results
                else:
                    if proportion == False:
                        print("Baseline global lp ", ans)
                        global_lb = ans
                        if global_lb >= 0:
                            verified_status = Status.VERIFIED
                    else:
                        print("Baseline proportion ", ans)
                        verified_proportion = ans
                        if verified_proportion >= self.args.cutoff_percentage:
                            verified_status = Status.VERIFIED

            return UAPSingleRes(domain=self.args.domain, input_per_prop=self.args.count_per_prop,
                    status=verified_status, global_lb=global_lb, time_taken=None, 
                    verified_proportion=verified_proportion)
        elif self.lb_coefs is not None:
            return self.run_crown_lp_baseline(proportion=proportion)